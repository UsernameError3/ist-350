Auth:
    Google OAuth: Express + MongoDB + PassportJS
    Payments: Stripe?

Tech Stack:
    MongoDB <--> Express / Node API <- (HTTP Request (JSON)) -> React App


Node: Javascript runtime used to execute code outside of the browser
Express: Library that runs in the Node runtime. Has helpers to make dealing with HTTP traffic Easier.

Incoming HTTP Request:

    Request -> (Ports) --> Node:
                            -> Express
                                -> Route Handler #1 -> Response
                                -> Route Handler #2 -> Response
                                -> Route Handler #3 -> Response
    Request <- (Ports) <-- Node <- Response


Basic Express App:

    CLI: npm init (press enter a bunch)
    CLI: npm install --save express
    Create index.js

    Route Handler:

        app.get('/', (req, res) => {
            res.send({ Development: 'In Progress...'});
        });

        app -> get -> '/' -> req -> res -> res.send({ hi: 'there' })

            App:  Express App to register this route handler with
            Get:  Watch for incoming requests with this method
            '/':  Watch for requests trying to access '/'.
            Req:  Object representing the incoming request.
            Res:  Object representing the outgoing response.

            res.send:  Immediately send back some JSON back to whoever made this request.

    Request Types:
        get:     Get Info
        post:    Send Info
        put:     Update all the properties of something
        delete:  Delete Something
        patch:   Update one or two properties of something


Deployment:

    Heroku:

        Dynamic Port Binding:       Heroku tells us which port our app will use, so we need to make sure we listen to the port they tell us to.
        Specify Node Environment:   We want to use a specific version of node, so we need to tell Heroku which version we want
        Specify Start Script:       Instruct Heroku what command to run to start our server running
        Create .gitignore file:     We don't want to include dependencies, Heroku will do that for us

        First Time Deployment:      Create Heroku Account -> Commit our codebase to git -> Install Heroku CLI and Create App -> Deploy App with Git -> Heroku deploys project
        Subsequent Deployment:      Deploy App with Git

        Install Heroku CLI + CMD: heroku -v
        CMD: heroku login
        CMD: heroku create
        CMD: git remote add heroku https://git.heroku.com/usernameerror3.git
        CMD: git push heroku master

        Redeployment:
        CMD: git push origin
        CMD: git push heroku master


Auth w/ Google OAUTH:  (Hardest Concept)

    Workflow:
        1. Client:
            User Clicks 'Login'

        2. Server:
            Forwards Request to Google

        3. Google:
            Asks user if they grant permission
            Begins OAUTH Flow.

    Helper Library: (Passport.js)

        Handles the communications between google and the server side code.

        Flaws:
            1. Automates the majority of the flow, but requires tweaking
            2. Confusion w/ Library Components
                Passport - General Helpers and Logic
                Passport Stategy - Helpers for Auth w/ Specific Provider (Google, Facebook, Etc)

    Installing Passport:

        npm install --save passport passport-google-oauth20
    
        Add the dependencies to index.js


    Google Strategy:
        
        Setup New Project on Google Cloud Platform:
        Get API Keys for your project.

    Securing API Keys:

        clientID - Public Token
        clientSecret - Private Token

        Setup keys.js in /config and add the file to .gitignore

    Route Handling for Callback URL:
        Handled via Express.
        Google tracks redirect URI's to prevent malicious inputs. (Specified in the GCP API Portal)

    Callbacks:


Automating Code Deployments:

    npm install --save nodemon
    Edit package.json, add "dev" to "scripts": { ..., "dev": "nodemon index.js"}

    nodemon will restart the server upon saved file updates.


Refactoring the Codebase:

    Folder Structure:

        /Server:
            /Config:        API Keys and Settings
            /Routes:        All Route Handlers
            /Services:      Helper Modules and Business Logic
            index.js


Cookie Based Authentication:
    Cookie will handle auth information.

    Email and Password Flow:

        Time --> --> -->
        1. Sign Up  -->  2. Sign Out  -->  3. Login
        
        1. Creates new keypair
        3. Match keypair, Authenticate.


    OAUTH Flow:

        Time --> --> -->
        1. Sign Up  -->  2. Sign Out  -->  3. Login
        
        1. Heres a Google Profile
        3. Heres a Google Profile, Do the profiles Match?


MongoDB Introduction:

    Note: uses mongoose.js to speed up DB Interaction

    Mongo stores data via collections.

    Comparisons to SQL:
        Schemaless.
        Collection == Like a table
        Record == Like a row

    Mongo Instance:

        Users Collection:
            JSON Record Object of Data.

        Posts Collection:
            JSON Record Object of Data.
        
        Payments Collection:
            JSON Record Object of Data.

    Mongoose:
        Model Class == Collection
        Model Instance == JSON Record
    
    Can use free tier MongoDB Hosting (Section 4: Adding Mongo DB, Lesson 35)


    Install Mongoose:
        npm install --save mongoose
        Create /models and User.js

    By using mongoose queries to look for google id's in the User Collection, Authentication Flow can resume.


    Passport Callbacks:
        Encoding & Decoding Serialization
        Allows manipulation of the data within the cookie.


    Enabling Cookies:
        npm install --save cookie-session
        Create a cookie key
        start the passport session

    Enable Logout:
        Add an express route and call passports logout function.



Dev vs Prod Environments:

    1 set of keys for local testing, and 1 set of keys for production.
    You have to re-create a new set of keys for prod.

    Place Heroku redirect domain instead of localhost.
    Create Heroku Environment Variables

    Heroku Proxy Issues May Arise.
        
        Possible Issues:
            1. Passport.js callback path is relative, and therefore is assumed http, not https, issue involves the google strategy.
            2. The Heroku Proxy may need trusted via a configuration setting or explicitly using an FQDN instead of a relative path.


Client Side Introduction:

    Create React App:
        npx create-react-app client

    The starter application creates its own server which will create problems.

    Server 1: Handles the Data Components
        MongoDB --> Express Server --> JSON Stuff --> Webpage

    Server 2: Packs the frontend Components into one Bundle
        Button.js, App.js, Header.js --> React Server --> JS Stuff --> Webpage


    Handling Multiple Servers:
        There will be 2 package.json for server and client.
        Modify the server package.json:
            add "client" to "scripts": { ..., "client": "npm run start --prefix client"}
            change "dev" in "scripts": { ..., "server": "nodemon index.js"}
            add "dev" to "scripts": { ..., "dev": "concurrently \"npm run server\" \"npm run client\" "}

    Routing Blocker Lesson: (Later Update has resolved the issue, Workaround Unnecessary.)

    Add the Sign in w/ Google to the Front End.


Developing the Client Side:

    Refactoring traditonal promises to await/async.

    Incorperating react components into the Front End.

    


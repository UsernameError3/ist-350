//Notes are highlighted w/ Better Comments Extension

Class:  Advanced CSS and SASS: Flexbox, Grid, Animations and More!

! Section 1:  Instructions

    Clone Project:  https://github.com/jonasschmedtmann/advanced-css-course.git
    Resources:      http://codingheroes.io/resources/

    Tooling:
        VS Code
        Firefox

! Section 2:  First Project

    1. Open Starter Code
    2. Building the Header #1
        A. Best way to perform basic reset using the universal selector
            * {margin: 0; padding: 0; box-sizing: border-box;}

        B. How to set project-wide font definitions
            body {font-family: "Lato", sans-serif; font-weight: 400; font-size: 16px; line-height: 1.7; color: #777;}

        C. How to clip parts of elements using clip-path
            clip-path: polygon(0 0, 100% 0, 100% 200px, 0 100%);
            clippy - bennettfeely.com/clippy/

    3. Building the Header #2
        A. Alt Text
            Important for SEO Optimization
        
        B. H1 element
            Important for SEO Optimization

        C. Font Customization
            Weight Spacing, Etc

        D. Absolute Centering    
            position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%);

    4. Animations
        A. Keyframes
        B. Browser Optimization
            Optimized: Opacity & Transform
        C. Fix Animation Jitter
            backface-visibility: hidden;

        D. Common Animation Properties

    5. Animated Button
        psuedo class: ".class:link"
        Button Decorations

    6. Button Animation
        psuedo class: ".class:link::after"
        animation properties.


! Section 3:  Behind CSS

    1. Three Pillars of Writing Good HTML & CSS:
        A. Responsive Design
            - Fluid Layouts
            - Media Queries
            - Responsive Images
            - Correct Units
            - Desktop-First vs Mobile-First

        B. Maintainable & Scalable Code
            - Clean
            - Easy-to-understand
            - Growth
            - Reusable
            - How to organize Files
            - How to name classes
            - How to structure HTML
            
        C. Web Performance
            - Less HTTP Requests
            - Less Code
            - Compress Code
            - Use a CSS Preprocessor
            - Less Images
            - Compress Images

    2. How CSS Works Behind the Scenes: Overview:

        A. What happens when we load a webpage:
            - Internet Requests: HTTP, DNS, Etc
            - Browser Loading -> HTML Parsing -> Document Object Model (DOM - Decoded HTML)
            - Browser Loading -> CSS Parsing -> Resolve Conflict Decorations (Cascade) & Process Final Values (% to px) -> CSS Object Model (CSSOM - Decoded CSS)
            - DOM + CSSOM = Render Tree -> Website Rendering: Visual Formatting Model -> Final Rendered Website


    3. How CSS is Parsed, Part 1: Cascade & Specifiy

        A. CSS Terminology:

            Example:
                .my-class {
                    color: blue;
                    text-align: center;
                    font-size: 20px;
                }

            - Selector:             .my-class
            - Declaration Block:    {...}
            - Declaration:          font-size: 20px;
            - Property:             font-size
            - Declared Value:       20px;

        B. First step of Parse Phase:

            - Cascade: Process of combining different stylesheets and resolving conflicts between CSS rules and declarations, when more than one rule applies to a certain element.
            - Importance (Weight) -> Specifity -> Source Order
            
            - Importance:
                1. User !important declarations
                2. Author !important declarations
                3. Author declarations
                4. User declarations
                5. Default browser declarations

            - Specificity:
                1. Inline Styles
                2. IDs
                3. Classes, Pseudo-Classes, Attribute
                4. Elements, Pseudo-Elements

                Example:

                    1.  .button {
                            font-size: 20px;
                            color: white;
                            background-color: blue;
                        }

                        Specificity Score:
                            Inline:   0
                            IDs:      0
                            Class:    1
                            Elements: 0


                    2.  nav#nav div.pull-right .button {
                            background-color: green;
                        }

                        Specificity Score:
                            Inline:   0
                            IDs:      1
                            Class:    2
                            Elements: 2
            
            - Source Order:
                The last declaration in the code will override all other declarations and will be applied.

! Section 4:  SASS & NPM



! Section 5:  More SASS



! Section 6:  Advanced Responsive Design



! Section 7:  Master Flexbox!



! Section 8:  CSS Grid



! Section 9:  More CSS Grid



! Section 10: End





























